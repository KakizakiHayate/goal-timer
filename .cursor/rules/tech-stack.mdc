---
description: 
globs: 
alwaysApply: true
---
---
description: 自分のプロジェクトの技術スタックを明文化し、関係者全員が共通認識を持つことを目的とする
globs: 
  - "*"
alwaysApply: true
---

# 技術スタック定義ルール（tech-stack.mdc）

このルールは、プロジェクトで採用している技術スタックを明確にし、設計や実装方針に一貫性を持たせることを目的としています。記載された技術は、開発・設計・レビューの前提条件とし、変更が必要な場合は事前に合意を得ることが必要です。

---

## フロントエンド

- **Flutter**：バージョン 3.x 系を使用
- **Dart**：バージョン 3.x 系を使用
- **状態管理**：Riverpod（ProviderではなくRiverpodを採用）
- **UI設計**：Material 3 に準拠した設計を行うこと

---

## バックエンド

- **Supabase**：認証、データベース、ストレージ等を統合的に使用
- **API通信**：REST API を使用し、クライアント側では Dio を用いる

---

## アーキテクチャ

- **設計指針**：Clean Architecture を基本構造とする
- **構造モデル**：MVVM（Model-View-ViewModel）パターンを併用すること
- 各層の責務を明確に分離し、ドメイン層のロジックを中心とした実装とする

---

## テスト

- **単体テスト**：flutter_test を使用
- **結合・UIテスト**：integration_test を使用
- テスト対象モジュールに応じた粒度と責務分離を意識すること

---

## パフォーマンス管理

- **デバッグ・プロファイリング**：Dart DevTools を使用して解析
- **描画最適化**：Impeller（iOS/Android）を使用可能であれば有効化すること

---

## 注意事項

- 上記技術スタックに含まれないライブラリやツールを導入する際は、事前にプロジェクトメンバー間でレビュー・合意を取ること
- バージョンアップ等による変更の必要がある場合は、互換性・影響範囲を確認のうえ提案・承認フローを経ること