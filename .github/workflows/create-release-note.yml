name: Create GitHub Release with all PRs since last tag

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.event.head_commit.message, 'Merge pull request')

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: latest_tag
        run: |
          git fetch --tags
          TAG=$(git describe --tags --abbrev=0 || echo "")
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Extract version from release branch
        id: get_version
        run: |
          BRANCH=$(git log -1 --merges --pretty=format:"%s" | grep -oE 'release/[0-9]+\.[0-9]+\.[0-9]+' || true)
          if [[ -z "$BRANCH" ]]; then
            echo "::error::release/x.x.x ブランチ名がマージメッセージに見つかりませんでした"
            exit 1
          fi
          VERSION=${BRANCH#release/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create new tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag v${{ steps.get_version.outputs.version }}
          git push origin v${{ steps.get_version.outputs.version }}

      - name: Generate changelog from PRs since last tag
        run: |
          echo "## リリース内容（v${{ steps.get_version.outputs.version }}）" > changelog.md

          # 前回のタグからHEADまでのMerge PRを取得
          COMMITS=$(git log ${{ steps.latest_tag.outputs.tag }}..HEAD --merges --pretty=format:"%s")
          
          for commit in $COMMITS; do
            if [[ "$commit" =~ Merge\ pull\ request\ \#([0-9]+) ]]; then
              PR_NUM=${BASH_REMATCH[1]}
              echo "🔍 Processing PR #$PR_NUM"
              PR_JSON=$(gh pr view $PR_NUM --json title,body)
              TITLE=$(echo "$PR_JSON" | jq -r '.title')
              BODY=$(echo "$PR_JSON" | jq -r '.body')

              CHANGELOG_ENTRY_ADDED=false
              # BODY を1行ずつ処理して、Markdown リンク形式の Backlog チケットを探す
              echo "--- Start processing BODY ---"
              echo "$BODY" | while IFS= read -r line; do
                echo "Processing line: [$line]"
                # 正規表現: [TANZAM_MHT-XXX](URL) 概要
                regex='\[(TANZAM_MHT-[0-9]+)\]\(([^)]+)\)\s+(.*)'
                if [[ "$line" =~ $regex ]]; then
                  echo "  -> Regex MATCHED"
                  TICKET="${BASH_REMATCH[1]}"
                  URL="${BASH_REMATCH[2]}"
                  SUMMARY="${BASH_REMATCH[3]}"
                  # 概要の前後の空白を削除
                  SUMMARY=$(echo "$SUMMARY" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                  
                  echo "  -> Found Ticket: [$TICKET]($URL): $SUMMARY" # ログ出力
                  echo "- [$TICKET]($URL): $SUMMARY" >> changelog.md
                  CHANGELOG_ENTRY_ADDED=true
                else
                  echo "  -> Regex NOT MATCHED"
                fi
              done
              echo "--- End processing BODY ---"
              
              # チケットが見つからなかった場合、フォールバックとしてPRタイトルを追加
              if [ "$CHANGELOG_ENTRY_ADDED" = false ]; then
                echo "  -> No Ticket found in body, using PR title." # ログ出力
                echo "- (PR #$PR_NUM): $TITLE" >> changelog.md
              fi
            fi
          done

      - name: Create GitHub Release
        run: |
          gh release create v${{ steps.get_version.outputs.version }} \
            --title "v${{ steps.get_version.outputs.version }}" \
            --notes-file changelog.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 