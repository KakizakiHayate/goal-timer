name: Create GitHub Release with all PRs since last tag

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: read

jobs:
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.event.head_commit.message, 'Merge pull request')

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: latest_tag
        run: |
          git fetch --tags
          TAG=$(git describe --tags --abbrev=0 || echo "")
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Extract version from release branch
        id: get_version
        run: |
          BRANCH=$(git log -1 --merges --pretty=format:"%s" | grep -oE 'release/[0-9]+\.[0-9]+\.[0-9]+' || true)
          if [[ -z "$BRANCH" ]]; then
            echo "::error::release/x.x.x ブランチ名がマージメッセージに見つかりませんでした"
            exit 1
          fi
          VERSION=${BRANCH#release/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create new tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag v${{ steps.get_version.outputs.version }}
          git push origin v${{ steps.get_version.outputs.version }}

      - name: Generate changelog from PRs since last tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "## リリース内容（v${{ steps.get_version.outputs.version }}）" > changelog.md

          # 前回のタグからHEADまでのMerge PRを取得
          COMMITS=$(git log ${{ steps.latest_tag.outputs.tag }}..HEAD --merges --pretty=format:"%s")
          
          # デバッグ: コミット一覧を表示
          echo "📋 Found commits between ${{ steps.latest_tag.outputs.tag }} and HEAD:"
          git log ${{ steps.latest_tag.outputs.tag }}..HEAD --merges --pretty=format:"%h %s"
          
          # カウンター初期化
          PR_COUNT=0
          TICKET_COUNT=0
          
          # コミットメッセージを保存して行ごとに処理（厳密なフォーマットで）
          git log ${{ steps.latest_tag.outputs.tag }}..HEAD --merges --pretty=format:"%s" > commits.txt
          echo "📝 Raw commit messages from git:"
          cat commits.txt
          
          while IFS= read -r commit_msg; do
            echo "🔄 Processing commit message: '$commit_msg'"
            
            # PR番号を複数のパターンで試行
            if [[ "$commit_msg" =~ [Mm]erge\ pull\ request\ \#([0-9]+) ]]; then
              PR_NUM=${BASH_REMATCH[1]}
              echo "✅ Pattern 1 matched! Found PR #$PR_NUM"
            elif [[ "$commit_msg" =~ \#([0-9]+) ]]; then
              PR_NUM=${BASH_REMATCH[1]}
              echo "✅ Pattern 2 matched! Found PR #$PR_NUM"
            else
              echo "❌ No PR pattern matched in commit message"
              continue
            fi
            
            echo "🔍 Processing PR #$PR_NUM"
            PR_COUNT=$((PR_COUNT + 1))
            
            # PRの情報を詳細に取得（エラーハンドリング追加）
            if ! gh pr view $PR_NUM --json title,body,number &> pr_info.json; then
              echo "⚠️ Failed to get PR #$PR_NUM info, skipping"
              continue
            fi
            
            cat pr_info.json
            PR_JSON=$(cat pr_info.json)
            TITLE=$(echo "$PR_JSON" | jq -r '.title')
            BODY=$(echo "$PR_JSON" | jq -r '.body')
            
            # PR情報がnullの場合は対応
            if [[ "$TITLE" == "null" || -z "$TITLE" ]]; then
              echo "⚠️ PR #$PR_NUM title is null or empty, skipping"
              continue
            fi
            
            # 詳細なデバッグ出力
            echo "::debug::PR #$PR_NUM Title: $TITLE"
            echo "::debug::PR Body length: $(echo "$BODY" | wc -c) chars"
            echo "::notice::PR #$PR_NUM Body first 100 chars: $(echo "$BODY" | head -c 100)..."
            
            CHANGELOG_ENTRY_ADDED=false
            
            # 一度PRのBODY全体で直接Backlogチケットリンクを検索
            if echo "$BODY" | grep -q "\[TANZAM_MHT-[0-9]\+\]"; then
              echo "✓ Backlog ticket references found in PR body!"
              
              # マークダウンリンク形式を抽出
              MARKDOWN_LINKS=$(echo "$BODY" | grep -o "\[TANZAM_MHT-[0-9]\+\](https://[^)]*)" || echo "")
              
              if [[ -n "$MARKDOWN_LINKS" ]]; then
                echo "🎯 Found markdown links: $MARKDOWN_LINKS"
                echo "$MARKDOWN_LINKS" > markdown_links.txt
                
                # 各リンクを処理
                while IFS= read -r link; do
                  # チケット番号を抽出
                  TICKET=$(echo "$link" | grep -o "TANZAM_MHT-[0-9]\+")
                  
                  # URL を抽出
                  URL=$(echo "$link" | grep -o "(.*)" | sed 's/(\(.*\))/\1/')
                  
                  # その行の概要を探す
                  LINE=$(echo "$BODY" | grep "$link")
                  SUMMARY=$(echo "$LINE" | sed -E "s/.*\]\\($URL\\)[[:space:]]*(.*)/\\1/" || echo "$TITLE")
                  
                  echo "💡 Extracted: Ticket=$TICKET, URL=$URL, Summary=$SUMMARY"
                  echo "- [$TICKET]($URL) $SUMMARY" >> changelog.md
                  CHANGELOG_ENTRY_ADDED=true
                  TICKET_COUNT=$((TICKET_COUNT + 1))
                done < markdown_links.txt
              fi
            else
              echo "❌ No Backlog ticket references found in PR body using direct search"
            fi
            
            # マークダウンリンク形式が見つからなかった場合、行ごとに処理
            if [ "$CHANGELOG_ENTRY_ADDED" = false ]; then
              echo "--- Start processing BODY line by line ---"
              echo "$BODY" > pr_body.txt
              
              while IFS= read -r line; do
                echo "Processing line: [$line]"
                # より正確なマークダウンリンク検出
                if [[ "$line" =~ \[TANZAM_MHT-[0-9]+\]\(https://[^)]+\) ]]; then
                  echo "  -> Markdown link found in line"
                  
                  # チケット番号を抽出
                  TICKET=$(echo "$line" | grep -o 'TANZAM_MHT-[0-9]\+')
                  
                  # URL を抽出
                  URL=$(echo "$line" | grep -o '(https://[^)]*)' | sed 's/(\(.*\))/\1/')
                  
                  # 概要を抽出 - リンクの後の部分
                  SUMMARY=$(echo "$line" | sed -E 's/\[.*\]\([^)]+\)[[:space:]]*(.*)/\1/')
                  
                  echo "  -> Found Ticket: [$TICKET]($URL): $SUMMARY" # ログ出力
                  echo "- [$TICKET]($URL) $SUMMARY" >> changelog.md
                  CHANGELOG_ENTRY_ADDED=true
                  TICKET_COUNT=$((TICKET_COUNT + 1))
                else
                  echo "  -> No markdown link in this line"
                fi
              done < pr_body.txt
              echo "--- End processing BODY line by line ---"
            fi
            
            echo "::notice::CHANGELOG_ENTRY_ADDED=$CHANGELOG_ENTRY_ADDED"
            
            # チケットが見つからなかった場合、フォールバックとしてPRタイトルを追加
            if [ "$CHANGELOG_ENTRY_ADDED" = false ]; then
              echo "  -> No Ticket found in body, using PR title." # ログ出力
              echo "- (PR #$PR_NUM): $TITLE" >> changelog.md
            fi
          done < commits.txt
          
          # 統計情報
          echo "📊 Found $PR_COUNT PRs and $TICKET_COUNT tickets"
          echo "📄 Changelog content:"
          cat changelog.md

      - name: Create GitHub Release
        run: |
          gh release create v${{ steps.get_version.outputs.version }} \
            --title "v${{ steps.get_version.outputs.version }}" \
            --notes-file changelog.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 