name: Create GitHub Release with all PRs since last tag

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: read

jobs:
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.event.head_commit.message, 'Merge pull request')

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: latest_tag
        run: |
          git fetch --tags
          TAG=$(git describe --tags --abbrev=0 || echo "")
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Extract version from release branch
        id: get_version
        run: |
          BRANCH=$(git log -1 --merges --pretty=format:"%s" | grep -oE 'release/[0-9]+\.[0-9]+\.[0-9]+' || true)
          if [[ -z "$BRANCH" ]]; then
            echo "::error::release/x.x.x „Éñ„É©„É≥„ÉÅÂêç„Åå„Éû„Éº„Ç∏„É°„ÉÉ„Çª„Éº„Ç∏„Å´Ë¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü"
            exit 1
          fi
          VERSION=${BRANCH#release/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create new tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag v${{ steps.get_version.outputs.version }}
          git push origin v${{ steps.get_version.outputs.version }}

      - name: Generate changelog from PRs since last tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "## „É™„É™„Éº„ÇπÂÜÖÂÆπÔºàv${{ steps.get_version.outputs.version }}Ôºâ" > changelog.md

          # ÂâçÂõû„ÅÆ„Çø„Ç∞„Åã„ÇâHEAD„Åæ„Åß„ÅÆMerge PR„ÇíÂèñÂæó
          COMMITS=$(git log ${{ steps.latest_tag.outputs.tag }}..HEAD --merges --pretty=format:"%s")
          
          # „Éá„Éê„ÉÉ„Ç∞: „Ç≥„Éü„ÉÉ„Éà‰∏ÄË¶ß„ÇíË°®Á§∫
          echo "üìã Found commits between ${{ steps.latest_tag.outputs.tag }} and HEAD:"
          git log ${{ steps.latest_tag.outputs.tag }}..HEAD --merges --pretty=format:"%h %s"
          
          # „Ç´„Ç¶„É≥„Çø„ÉºÂàùÊúüÂåñ
          PR_COUNT=0
          TICKET_COUNT=0
          
          # „Éû„Éº„Ç∏„Ç≥„Éü„ÉÉ„Éà„Åã„ÇâÁõ¥Êé•„É™„É™„Éº„ÇπÂØæË±°„ÅÆPR„ÇíÁâπÂÆö„Åô„Çã
          MERGE_COMMIT=$(git log -1 --merges --pretty=format:"%s")
          echo "üîç ÊúÄÊñ∞„ÅÆ„Éû„Éº„Ç∏„Ç≥„Éü„ÉÉ„Éà: $MERGE_COMMIT"
          
          # „Éó„É´„É™„ÇØ„Ç®„Çπ„ÉàÁï™Âè∑„ÇíÊäΩÂá∫Ôºà„Çà„ÇäÂçòÁ¥î„Å™ÊñπÊ≥ïÔºâ
          PR_NUM=$(echo "$MERGE_COMMIT" | sed -n 's/.*#\([0-9]\+\).*/\1/p')
          
          if [[ -n "$PR_NUM" ]]; then
            echo "‚úÖ Found PR #$PR_NUM"
            PR_COUNT=$((PR_COUNT + 1))
            
            # PR„ÅÆÊÉÖÂ†±„ÇíË©≥Á¥∞„Å´ÂèñÂæó
            echo "üì• Fetching PR info for #$PR_NUM"
            gh pr view $PR_NUM --json title,body,number || echo "PR info fetch failed"
            
            PR_JSON=$(gh pr view $PR_NUM --json title,body)
            TITLE=$(echo "$PR_JSON" | jq -r '.title')
            BODY=$(echo "$PR_JSON" | jq -r '.body')
            
            # „Éá„Éê„ÉÉ„Ç∞Âá∫Âäõ
            echo "üìÉ PR Title: $TITLE"
            echo "üìè PR Body length: $(echo "$BODY" | wc -c) characters"
            
            if [[ -n "$BODY" ]]; then
              # PRÊú¨Êñá„Å´Âê´„Åæ„Çå„ÇãBacklog„ÉÅ„Ç±„ÉÉ„Éà„ÅÆÊäΩÂá∫„ÇíË©¶„Åø„Çã
              echo "üîé Searching for Backlog tickets in PR #$PR_NUM body"
              echo "$BODY" > pr_body.txt
              grep -n "TANZAM_MHT" pr_body.txt || echo "No direct ticket references found"
              
              CHANGELOG_ENTRY_ADDED=false
              
              # „Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„É™„É≥„ÇØ„ÇíÊé¢„Åô
              while IFS= read -r line; do
                if [[ "$line" == *"TANZAM_MHT"* && "$line" == *"["* && "$line" == *"]("* ]]; then
                  # „ÉÅ„Ç±„ÉÉ„ÉàÁï™Âè∑„ÅÆÊäΩÂá∫
                  TICKET=$(echo "$line" | grep -o 'TANZAM_MHT-[0-9]*')
                  
                  if [[ -n "$TICKET" ]]; then
                    # URL „ÅÆÊäΩÂá∫
                    URL=$(echo "$line" | sed -n 's/.*\]\(\(http[^)]*\)\).*/\1/p' || echo "https://mhtcode.backlog.com/view/$TICKET")
                    
                    # Ê¶ÇË¶Å„ÅÆÊäΩÂá∫
                    SUMMARY=$(echo "$line" | sed 's/.*\](.*) \(.*\)/\1/' || echo "$TITLE")
                    
                    echo "‚úì Found ticket: $TICKET with summary: $SUMMARY"
                    echo "- [$TICKET]($URL) $SUMMARY" >> changelog.md
                    CHANGELOG_ENTRY_ADDED=true
                    TICKET_COUNT=$((TICKET_COUNT + 1))
                  fi
                fi
              done < pr_body.txt
              
              # „ÉÅ„Ç±„ÉÉ„Éà„ÅåË¶ã„Å§„Åã„Çâ„Å™„Åã„Å£„ÅüÂ†¥Âêà
              if [ "$CHANGELOG_ENTRY_ADDED" = false ]; then
                echo "‚ö†Ô∏è No Backlog tickets found in PR body, using PR title instead"
                echo "- (PR #$PR_NUM): $TITLE" >> changelog.md
              fi
            else
              echo "‚ö†Ô∏è Empty PR body, using PR title"
              echo "- (PR #$PR_NUM): $TITLE" >> changelog.md
            fi
          else
            echo "‚ùå Could not extract PR number from merge commit: $MERGE_COMMIT"
          fi
          
          # Áµ±Ë®àÊÉÖÂ†±
          echo "üìä Found $PR_COUNT PRs and $TICKET_COUNT tickets"
          echo "üìÑ Changelog content:"
          cat changelog.md

      - name: Create GitHub Release
        run: |
          gh release create v${{ steps.get_version.outputs.version }} \
            --title "v${{ steps.get_version.outputs.version }}" \
            --notes-file changelog.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 