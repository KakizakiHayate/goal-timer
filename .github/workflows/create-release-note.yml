name: Create GitHub Release with all PRs since last tag

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: read

jobs:
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.event.head_commit.message, 'Merge pull request')

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: latest_tag
        run: |
          git fetch --tags
          TAG=$(git describe --tags --abbrev=0 || echo "")
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Extract version from release branch
        id: get_version
        run: |
          BRANCH=$(git log -1 --merges --pretty=format:"%s" | grep -oE 'release/[0-9]+\.[0-9]+\.[0-9]+' || true)
          if [[ -z "$BRANCH" ]]; then
            echo "::error::release/x.x.x „Éñ„É©„É≥„ÉÅÂêç„Åå„Éû„Éº„Ç∏„É°„ÉÉ„Çª„Éº„Ç∏„Å´Ë¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü"
            exit 1
          fi
          VERSION=${BRANCH#release/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create new tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag v${{ steps.get_version.outputs.version }}
          git push origin v${{ steps.get_version.outputs.version }}

      - name: Generate changelog from PRs since last tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "## „É™„É™„Éº„ÇπÂÜÖÂÆπÔºàv${{ steps.get_version.outputs.version }}Ôºâ" > changelog.md

          # ÂâçÂõû„ÅÆ„Çø„Ç∞„Åã„ÇâHEAD„Åæ„Åß„ÅÆMerge PR„ÇíÂèñÂæó
          COMMITS=$(git log ${{ steps.latest_tag.outputs.tag }}..HEAD --merges --pretty=format:"%s")
          
          # „Éá„Éê„ÉÉ„Ç∞: „Ç≥„Éü„ÉÉ„Éà‰∏ÄË¶ß„ÇíË°®Á§∫
          echo "üìã Found commits between ${{ steps.latest_tag.outputs.tag }} and HEAD:"
          git log ${{ steps.latest_tag.outputs.tag }}..HEAD --merges --pretty=format:"%h %s"
          
          # „Ç´„Ç¶„É≥„Çø„ÉºÂàùÊúüÂåñ
          PR_COUNT=0
          TICKET_COUNT=0
          
          # „Éû„Éº„Ç∏„Ç≥„Éü„ÉÉ„Éà„Åã„ÇâÁõ¥Êé•„É™„É™„Éº„ÇπÂØæË±°„ÅÆPR„ÇíÁâπÂÆö„Åô„Çã
          MERGE_COMMIT=$(git log -1 --merges --pretty=format:"%s")
          echo "üîç ÊúÄÊñ∞„ÅÆ„Éû„Éº„Ç∏„Ç≥„Éü„ÉÉ„Éà: $MERGE_COMMIT"
          
          # „Éó„É´„É™„ÇØ„Ç®„Çπ„ÉàÁï™Âè∑„ÇíÊäΩÂá∫Ôºà„Çà„ÇäÂçòÁ¥î„Å™ÊñπÊ≥ïÔºâ
          PR_NUM=$(echo "$MERGE_COMMIT" | sed -n 's/.*#\([0-9]\+\).*/\1/p')
          
          if [[ -n "$PR_NUM" ]]; then
            echo "‚úÖ Found PR #$PR_NUM"
            PR_COUNT=$((PR_COUNT + 1))
            
            # PR„ÅÆÊÉÖÂ†±„ÇíË©≥Á¥∞„Å´ÂèñÂæó
            echo "üì• Fetching PR info for #$PR_NUM"
            gh pr view $PR_NUM --json title,body,number || echo "PR info fetch failed"
            
            PR_JSON=$(gh pr view $PR_NUM --json title,body)
            TITLE=$(echo "$PR_JSON" | jq -r '.title')
            BODY=$(echo "$PR_JSON" | jq -r '.body')
            
            # „Éá„Éê„ÉÉ„Ç∞Âá∫Âäõ
            echo "üìÉ PR Title: $TITLE"
            echo "üìè PR Body length: $(echo "$BODY" | wc -c) characters"
            
            if [[ -n "$BODY" ]]; then
              # PRÊú¨Êñá„Çí‰øùÂ≠ò„Åó„Å¶Âá¶ÁêÜ
              echo "$BODY" > pr_body.txt
              echo "üîç PRÊú¨Êñá„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü"
              
              # ÊñáÂ≠óÂàóÂá¶ÁêÜ„ÇíÊîπÂñÑ - grep „Å® sed „ÅÆÈ´òÂ∫¶„Å™ÁµÑ„ÅøÂêà„Çè„Åõ„Çí‰ΩøÁî®
              echo "üîç „ÉÅ„Ç±„ÉÉ„ÉàÊÉÖÂ†±„ÇíÊäΩÂá∫„Åó„Åæ„Åô"
              CHANGELOG_ENTRY_ADDED=false
              
              # „Çà„Çä‰ø°È†ºÊÄß„ÅÆÈ´ò„ÅÑ„Ç¢„Éó„É≠„Éº„ÉÅ - ÂçòÁ¥î„Å™Ë°åÂá¶ÁêÜ
              grep -n "\[TANZAM_MHT-[0-9]\+\]" pr_body.txt > ticket_lines.txt
              
              if [ -s ticket_lines.txt ]; then
                echo "‚úÖ Backlog„ÉÅ„Ç±„ÉÉ„ÉàÂèÇÁÖß„ÇíÊ§úÂá∫„Åó„Åæ„Åó„Åü"
                
                while IFS= read -r line_with_num; do
                  LINE_NUM=$(echo "$line_with_num" | cut -d':' -f1)
                  LINE=$(echo "$line_with_num" | cut -d':' -f2-)
                  
                  echo "Âá¶ÁêÜ„Åô„ÇãË°å #$LINE_NUM: $LINE"
                  
                  # „ÉÅ„Ç±„ÉÉ„ÉàÁï™Âè∑„ÇíÊäΩÂá∫
                  TICKET=$(echo "$LINE" | grep -o "TANZAM_MHT-[0-9]\+" | head -1)
                  if [[ -n "$TICKET" ]]; then
                    # URL „ÇíÊäΩÂá∫
                    URL=$(echo "$LINE" | grep -o "https://[^)]*" || echo "https://mhtcode.backlog.com/view/$TICKET")
                    
                    # Ê¶ÇË¶Å„ÇíÊäΩÂá∫ - „Çà„ÇäÁ¢∫ÂÆü„Å™ÊñπÊ≥ï
                    # „Åæ„Åö„ÄÅË°åÂÜÖ„Åß„É™„É≥„ÇØÂæå„ÅÆÈÉ®ÂàÜ„ÇíÊäΩÂá∫
                    LINK_PATTERN="\[$TICKET\](.*)"
                    if echo "$LINE" | grep -q "$LINK_PATTERN"; then
                      # „É™„É≥„ÇØ„ÅÆÂæå„ÅÆÈÉ®ÂàÜ„ÇíÂèñÂæó
                      AFTER_LINK=$(echo "$LINE" | sed -E "s/.*\[$TICKET\][^)]*\)//" | sed 's/^[[:space:]]*//')
                      if [[ -n "$AFTER_LINK" ]]; then
                        # „É™„É≥„ÇØÂæå„Å´‰Ωï„Åã„ÅÇ„Çå„Å∞„ÄÅ„Åù„Çå„ÇíÊ¶ÇË¶Å„Å®„Åô„Çã
                        SUMMARY="$AFTER_LINK"
                      else
                        # „É™„É≥„ÇØÂæå„Å´‰Ωï„ÇÇ„Å™„Åë„Çå„Å∞„ÄÅÊ¨°„ÅÆË°å„ÇíÂèñÂæó
                        NEXT_LINE_NUM=$((LINE_NUM + 1))
                        SUMMARY=$(sed -n "${NEXT_LINE_NUM}p" pr_body.txt)
                      fi
                    else
                      # „Éë„Çø„Éº„É≥„Éû„ÉÉ„ÉÅ„Åó„Å™„ÅÑÂ†¥Âêà„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
                      SUMMARY=$(sed -n "$((LINE_NUM + 1))p" pr_body.txt)
                    fi
                    
                    # Ê¶ÇË¶Å„ÅÆÂÖàÈ†≠„ÅÆ‰∏çË¶Å„Å™ÊñáÂ≠ó„ÇíÂâäÈô§
                    SUMMARY=$(echo "$SUMMARY" | sed 's/^[[:space:]]*//;s/^[[:punct:]]*//')
                    
                    echo "‚úÖ ÊäΩÂá∫ÁµêÊûú: „ÉÅ„Ç±„ÉÉ„Éà=$TICKET, URL=$URL"
                    echo "‚úÖ Ê¶ÇË¶Å: $SUMMARY"
                    
                    # „ÉÅ„Ç±„ÉÉ„ÉàÊÉÖÂ†±„Çí„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥ÂΩ¢Âºè„Åßchangelog„Å´ËøΩÂä†
                    echo "[$TICKET]($URL) $SUMMARY" >> changelog.md
                    CHANGELOG_ENTRY_ADDED=true
                    TICKET_COUNT=$((TICKET_COUNT + 1))
                  fi
                done < ticket_lines.txt
              else
                echo "‚ùå PRÊú¨Êñá„Å´Backlog„ÉÅ„Ç±„ÉÉ„ÉàÂèÇÁÖß„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
              fi
              
              # „ÉÅ„Ç±„ÉÉ„Éà„ÅåË¶ã„Å§„Åã„Çâ„Å™„Åã„Å£„ÅüÂ†¥Âêà
              if [ "$CHANGELOG_ENTRY_ADDED" = false ]; then
                echo "‚ö†Ô∏è PRÊú¨Êñá„Åã„Çâ„ÉÅ„Ç±„ÉÉ„ÉàÊÉÖÂ†±„ÇíÊäΩÂá∫„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇPR„Çø„Ç§„Éà„É´„Çí‰ΩøÁî®„Åó„Åæ„Åô„ÄÇ"
                echo "(PR #$PR_NUM): $TITLE" >> changelog.md
              fi
            else
              echo "‚ö†Ô∏è PRÊú¨Êñá„ÅåÁ©∫„Åß„Åô„ÄÇPR„Çø„Ç§„Éà„É´„Çí‰ΩøÁî®„Åó„Åæ„Åô„ÄÇ"
              echo "(PR #$PR_NUM): $TITLE" >> changelog.md
            fi
          else
            echo "‚ùå Could not extract PR number from merge commit: $MERGE_COMMIT"
          fi
          
          # Áµ±Ë®àÊÉÖÂ†±
          echo "üìä Found $PR_COUNT PRs and $TICKET_COUNT tickets"
          echo "üìÑ Changelog content:"
          cat changelog.md

      - name: Create GitHub Release
        run: |
          gh release create v${{ steps.get_version.outputs.version }} \
            --title "v${{ steps.get_version.outputs.version }}" \
            --notes-file changelog.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 