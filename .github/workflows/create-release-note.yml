name: Create GitHub Release with all PRs since last tag

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.event.head_commit.message, 'Merge pull request')

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: latest_tag
        run: |
          git fetch --tags
          TAG=$(git describe --tags --abbrev=0 || echo "")
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Extract version from release branch
        id: get_version
        run: |
          BRANCH=$(git log -1 --merges --pretty=format:"%s" | grep -oE 'release/[0-9]+\.[0-9]+\.[0-9]+' || true)
          if [[ -z "$BRANCH" ]]; then
            echo "::error::release/x.x.x ブランチ名がマージメッセージに見つかりませんでした"
            exit 1
          fi
          VERSION=${BRANCH#release/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create new tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag v${{ steps.get_version.outputs.version }}
          git push origin v${{ steps.get_version.outputs.version }}

      - name: Generate changelog from PRs since last tag
        run: |
          echo "## リリース内容（v${{ steps.get_version.outputs.version }}）" > changelog.md

          # 前回のタグからHEADまでのMerge PRを取得
          COMMITS=$(git log ${{ steps.latest_tag.outputs.tag }}..HEAD --merges --pretty=format:"%s")
          
          # デバッグ: コミット一覧を表示
          echo "📋 Found commits between ${{ steps.latest_tag.outputs.tag }} and HEAD:"
          git log ${{ steps.latest_tag.outputs.tag }}..HEAD --merges --pretty=format:"%h %s"
          
          # カウンター初期化
          PR_COUNT=0
          TICKET_COUNT=0
          
          # コミットメッセージを保存して行ごとに処理
          git log ${{ steps.latest_tag.outputs.tag }}..HEAD --merges --pretty=format:"%s" > commits.txt
          
          while IFS= read -r commit_msg; do
            echo "🔄 Processing commit: $commit_msg"
            if [[ "$commit_msg" =~ Merge\ pull\ request\ \#([0-9]+) ]]; then
              PR_NUM=${BASH_REMATCH[1]}
              echo "🔍 Processing PR #$PR_NUM"
              PR_COUNT=$((PR_COUNT + 1))
              
              # PRの情報を詳細に取得
              gh pr view $PR_NUM --json title,body,number
              PR_JSON=$(gh pr view $PR_NUM --json title,body)
              TITLE=$(echo "$PR_JSON" | jq -r '.title')
              BODY=$(echo "$PR_JSON" | jq -r '.body')
  
              # 詳細なデバッグ出力
              echo "::debug::PR #$PR_NUM Title: $TITLE"
              echo "::debug::PR Body length: $(echo "$BODY" | wc -c) chars"
              echo "::notice::PR #$PR_NUM Body first 100 chars: $(echo "$BODY" | head -c 100)..."
              
              CHANGELOG_ENTRY_ADDED=false
              # BODY を1行ずつ処理して、Markdown リンク形式の Backlog チケットを探す
              echo "--- Start processing BODY ---"
              
              # 改行を含む場合の処理を改善
              echo "$BODY" > pr_body.txt
              cat pr_body.txt | grep -n "TANZAM_MHT" || echo "No ticket references found in PR body"
              
              while IFS= read -r line; do
                echo "Processing line: [$line]"
                # Backlogチケット形式を検出
                if [[ "$line" =~ TANZAM_MHT-[0-9]+ ]]; then
                  echo "  -> Ticket pattern found in line"
                  # チケット番号全体を抽出
                  TICKET=$(echo "$line" | grep -o 'TANZAM_MHT-[0-9]\+')
                  # URL を抽出（ある場合）
                  URL=$(echo "$line" | grep -o 'https://[^)]*' || echo "https://mhtcode.backlog.com/view/$TICKET")
                  # 概要を抽出
                  SUMMARY=$(echo "$line" | sed -E 's/.*TANZAM_MHT-[0-9]+[^)]*\)[[:space:]]*(.*)/\1/' || echo "$TITLE")
                  
                  echo "  -> Found Ticket: $TICKET ($URL): $SUMMARY" # ログ出力
                  echo "- [$TICKET]($URL): $SUMMARY" >> changelog.md
                  CHANGELOG_ENTRY_ADDED=true
                  TICKET_COUNT=$((TICKET_COUNT + 1))
                else
                  echo "  -> No ticket pattern found"
                fi
              done < pr_body.txt
              echo "--- End processing BODY ---"
              echo "::notice::CHANGELOG_ENTRY_ADDED=$CHANGELOG_ENTRY_ADDED"
              
              # チケットが見つからなかった場合、フォールバックとしてPRタイトルを追加
              if [ "$CHANGELOG_ENTRY_ADDED" = false ]; then
                echo "  -> No Ticket found in body, using PR title." # ログ出力
                echo "- (PR #$PR_NUM): $TITLE" >> changelog.md
              fi
            fi
          done < commits.txt
          
          # 統計情報
          echo "📊 Found $PR_COUNT PRs and $TICKET_COUNT tickets"
          echo "📄 Changelog content:"
          cat changelog.md

      - name: Create GitHub Release
        run: |
          gh release create v${{ steps.get_version.outputs.version }} \
            --title "v${{ steps.get_version.outputs.version }}" \
            --notes-file changelog.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 